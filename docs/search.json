[
  {
    "objectID": "posts/probability-integral-transform/index.html",
    "href": "posts/probability-integral-transform/index.html",
    "title": "Probability integral transforms",
    "section": "",
    "text": "take random numbers from a distribution\nThen run them through that distribution’s CDF\nsure enough it is uniform!"
  },
  {
    "objectID": "posts/probability-integral-transform/index.html#what-happens-when-you-are-wrong",
    "href": "posts/probability-integral-transform/index.html#what-happens-when-you-are-wrong",
    "title": "Probability integral transforms",
    "section": "what happens when you are wrong",
    "text": "what happens when you are wrong\nlet’s make some curves that don’t really match\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6          ✔ purrr   0.3.4.9000\n✔ tibble  3.1.7          ✔ dplyr   1.0.8     \n✔ tidyr   1.1.3          ✔ stringr 1.4.0     \n✔ readr   2.1.1          ✔ forcats 0.5.1     \n\n\nWarning: package 'ggplot2' was built under R version 4.1.2\n\n\nWarning: package 'tibble' was built under R version 4.1.2\n\n\nWarning: package 'dplyr' was built under R version 4.1.2\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nn <- 4000\ntibble(meanval = seq(from = 1, to = 14, length.out = 6),\n       sd = 2.5) |> \n  expand_grid(x = seq(from = 0, to = 18, length.out = 30)) |>\n  mutate(normal_dist = dnorm(x, mean = meanval, sd = sd),\n         gamma_dist = dgamma(x, \n                        shape = meanval^2/sd^2,\n                        rate = meanval/sd^2)) |> \n  pivot_longer(ends_with(\"dist\"), \n               names_to = \"distribution\",\n               values_to = \"value\") |> \n  ggplot(aes(x = x, y = value, colour = distribution)) + \n  geom_line()  +\n  facet_wrap(~meanval)\n\n\n\n\nWe can see that the fit gets worse as the mean drops\nlet’s simulate data from the gamma and use the PIT assuming instead it is normal:\n\nn <- 4000\ntibble(meanval = seq(from = 1, to = 14, length.out = 6),\n       sd = 2.5) |> \n  rowwise() |>\n  mutate(normal_dist = list(rnorm(n, mean = meanval, sd = sd)),\n         gamma_dist = list(rgamma(n, \n                        shape = meanval^2/sd^2,\n                        rate = meanval/sd^2))) |> \n  pivot_longer(ends_with(\"dist\"), \n               names_to = \"distribution\",\n               values_to = \"samples\") |> \n  rowwise() |> \n  mutate(pit_samples = list(pnorm(samples, mean = meanval, sd = sd))) |> \n  select(-samples) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(distribution~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nlet’s try it with just the gamma, but changing both moments and always using the normal:\n\nn <- 4000\nexpand_grid(meanval = seq(from = 1, to = 14, length.out = 6),\n       sdval = seq(from = .2, to = 7, length.out = 4)) |> \n  rowwise() |>\n  mutate(gamma_dist = list(rgamma(n, \n                        shape = meanval^2/sdval^2,\n                        rate = meanval/sdval^2))) |> \n  rowwise() |> \n  mutate(pit_samples = list(\n    pnorm(gamma_dist,\n          mean = meanval,\n          sd = sdval))) |> \n  select(-gamma_dist) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(sdval~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nand with the lognormal\n\nn <- 4000\nexpand_grid(meanval = seq(from = 1, \n                          to = 14, \n                          length.out = 6),\n       sdval = seq(from = .2, \n                   to = 7, \n                   length.out = 4)) |> \n  rowwise() |>\n  mutate(\n    cf = log(sdval/meanval)^2 + 1,\n    lnorm_dist = list(rlnorm(n, \n                        meanlog = log(meanval) - .5*cf, \n                        sdlog = sqrt(cf))\n                      )\n    )|> \n  rowwise() |> \n  mutate(pit_samples = list(\n    pnorm(lnorm_dist,\n          mean = meanval,\n          sd = sdval)\n    # plnorm(lnorm_dist, \n    #        meanlog = log(meanval) - .5*cf, \n    #        sdlog = sqrt(cf))\n    )) |> \n  select(-lnorm_dist) |> \n  # filter(distribution == \"gamma_dist\") |> \n  unnest(pit_samples) |> \n  ggplot(aes(x = pit_samples)) + \n  geom_histogram() + \n  facet_grid(sdval~meanval)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/demo-post/index.html",
    "href": "posts/demo-post/index.html",
    "title": "Exponential change",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\n\\[\nY \\sim \\text{N}(\\mu, \\sigma)\n\\tag{1}\\]\nwe love a simple equation like Equation 1\nlet’s have a plot\n\nset.seed(5992)\nx <- runif(42, -2, 2)\ny <- rnorm(42, 5 + 2.4 * x, 2.3)\n\nplot(x, y)\n\n\n\n\nHere are two figures I made beforehand:\n\nlibrary(targets)\ntar_load(plot_add)\ntar_load(plot_mult)\nplot_add\n\n\n\n\nI want to know if you can see these figures!"
  },
  {
    "objectID": "posts/growth_curve_measurement_error/index.html",
    "href": "posts/growth_curve_measurement_error/index.html",
    "title": "Growth curves",
    "section": "",
    "text": "library(targets)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidybayes)\nMany animals and plants grow quickly when small and more slowly as they mature. There are many popular ways of describing this relationship; one very common and convenient relationship is the Von-Bertanalaffy (VB) growth curve:\n\\[\nL_t = L_0e^{-rt} + L_\\infty(1 - e^{-rt})\n\\tag{1}\\]\nThis can also be written as\n\\[\nL_t = L_\\infty - (L_\\infty - L_0)e^{-rt}\n\\]\nThis curve has a long tradition in ecology. It can be derived from simple assumptions about how different aspects of metabolism scale with the body size of an organism. I’m not going to derive it here because I don’t want this to be a huge post!\nI like this second way of writing the equation because it highlights that the VB equation is a linear transformation of an exponential function."
  },
  {
    "objectID": "posts/growth_curve_measurement_error/index.html#a-single-tree",
    "href": "posts/growth_curve_measurement_error/index.html#a-single-tree",
    "title": "Growth curves",
    "section": "a single tree",
    "text": "a single tree\nI’m going to do a simple simulation of one tree growing. here is code that does that\n\n\nfunction (time = seq(from = 10, to = 200, by = 5), Lo = 0.01, \n    Lmax = 150, r = 0.03, sd = 5) \n{\n    tibble::tibble(time, Lt = Lmax - (Lmax - Lo) * exp(-r * time), \n        Lt_obs = rnorm(length(Lt), mean = Lt, sd = 5))\n}\n\n\n\ntar_load(vb_one_tree)\n\nvb_one_tree |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() + \n  geom_line(aes(y = Lt)) + \n  theme_bw()\n\n\n\n\nFigure 1: One tree’s growth\n\n\n\n\nsimulate this same data in targets\nfit a stan model to it! here is the Stan model: formatted?\n\n\ndata{\n  int<lower=0> n;\n  vector[n] time;\n  vector[n] Lt;\n}\nparameters{\n  real<lower=0> r;\n  real<lower=0> Lmax;\n  real<lower=0> sigma_obs;\n}\nmodel{\n  Lt ~ normal(Lmax * (1 - exp(-r*time)), sigma_obs);\n  r ~ lognormal(-3, 1);\n  Lmax ~ normal(200, 20);\n  sigma_obs ~ exponential(1);\n}\n\n\n\nvb_one_tree <- cmdstan_model(here::here(\"posts\", \"growth_curve_measurement_error\",\"vb_one_tree.stan\"))\n\none_tree_sim <- sim_vb_one_tree()\n\none_tree_list <- list(n = nrow(one_tree_sim),\n                      time  = one_tree_sim$time, \n                      Lt = one_tree_sim$Lt_obs)\n\none_tree_post <- vb_one_tree$sample(data = one_tree_list,\n                                    refresh = 0L,\n                                    parallel_chains = 4)\n\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.2 seconds.\nChain 3 finished in 0.1 seconds.\nChain 4 finished in 0.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 0.5 seconds.\n\none_tree_post\n\n  variable   mean median   sd  mad     q5    q95 rhat ess_bulk ess_tail\n lp__      -84.81 -84.49 1.29 1.00 -87.32 -83.46 1.00     1788     2129\n r           0.03   0.03 0.00 0.00   0.03   0.03 1.00     2213     2325\n Lmax      148.90 148.91 1.15 1.15 147.02 150.73 1.00     2250     2299\n sigma_obs   4.80   4.74 0.52 0.49   4.04   5.74 1.00     2571     2297\n\n\nplot it\n\nlibrary(tidybayes)\n\nexpected_df <- one_tree_post |> \n  spread_rvars(Lmax, r) |> \n  expand_grid(time = seq(0, 200, length.out = 14)) |> \n  mutate(Lt = Lmax * (1 - exp(-r * time)))\n\nexpected_plot <- expected_df |> \n  ggplot(aes(x = time, y = Lt)) + \n  stat_lineribbon()\nexpected_plot\n\n\n\n\nGrowth curve for one tree. the line shows the expected value, with posterior uncertainty around exactly what that average should be.\n\n\n\n\nThis relationship shows the average line, the expected size of the tree. We can add the original data like this:\n\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_dist_lineribbon(aes(x = time, dist = Lt),\n                  data = expected_df, inherit.aes = FALSE)\n\n\n\n\nAt the time of this writing the error messages here are particularly unhelpful. If you try to use stat_lineribbon rather than stat_dist_lineribbon you get the foloing misleading message:\n\none_tree_sim |> \n  ggplot(aes(x = time, y = Lt_obs)) + \n  geom_point() +\n  stat_lineribbon(aes(x = time, y = Lt),\n                  data = expected_df, inherit.aes = FALSE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This is just a test blog"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Ecological Data Simulations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\nAndrew\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstan\n\n\nsimulation\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nAndrew\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2022\n\n\nAndrew\n\n\n\n\n\n\nNo matching items"
  }
]